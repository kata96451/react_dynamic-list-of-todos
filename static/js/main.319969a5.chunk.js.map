{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","setIsSelected","setIsLoaded","setSelectedTodoId","length","className","map","todo","userId","completed","classNames","title","type","onClick","selected","id","window","setTimeout","TodoFilter","setComplitedSelect","complitedSelect","setInputValue","inputValue","value","onChange","event","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","then","fetch","res","json","Loader","TodoModal","isSelected","isLoaded","selectedTodoId","useState","user","setUser","selectedTodo","find","useEffect","uselUsers","href","email","name","App","setTodos","finally","filteredTodos","useMemo","filter","result","startsWith","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.319969a5.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[];\n  setIsSelected: (isSelected: boolean) => void,\n  setIsLoaded: (isLoaded: boolean) => void,\n  setSelectedTodoId: (id: number) => void,\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  setIsSelected,\n  setIsLoaded,\n  setSelectedTodoId,\n}) => {\n  const handeleClick = (selected: Todo) => {\n    setIsSelected(true);\n    setSelectedTodoId(selected.id);\n\n    window.setTimeout(() => {\n      setIsLoaded(true);\n    }, 1000);\n  };\n\n  return (\n    <>\n      {todos.length === 0\n        ? ''\n        : (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {todos.map(todo => (\n                <tr data-cy=\"todo\" className=\"\" key={todo.id}>\n                  <td className=\"is-vcentered\">{todo.userId}</td>\n                  <td className=\"is-vcentered\">\n                    {todo.completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n                  <td className=\"is-vcentered is-expanded\">\n                    <p className={classNames(\n                      todo.completed ? 'has-text-success' : 'has-text-danger',\n                    )}\n                    >\n                      {todo.title}\n                    </p>\n                  </td>\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => handeleClick(todo)}\n                    >\n                      <span className=\"icon\">\n                        <i className=\"far fa-eye\" />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n    </>\n\n  );\n};\n","interface Props {\n  setComplitedSelect: (complitedSelect: string) => void,\n  complitedSelect: string,\n  setInputValue: (inputValue: string) => void,\n  inputValue: string,\n}\n\nexport const TodoFilter: React.FC<Props> = ({\n  setComplitedSelect,\n  complitedSelect,\n  setInputValue,\n  inputValue,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={complitedSelect}\n            onChange={(event) => setComplitedSelect(event.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"search\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={inputValue}\n          onChange={(event) => setInputValue(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => setInputValue('')}\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ninterface Props {\n  isSelected: boolean,\n  isLoaded: boolean,\n  setIsLoaded: (isLoaded: boolean) => void,\n  setIsSelected: (isSelected: boolean) => void,\n  selectedTodoId: number | null,\n  todos: Todo[],\n}\n\nexport const TodoModal: React.FC<Props> = ({\n  isSelected,\n  isLoaded,\n  setIsLoaded,\n  setIsSelected,\n  selectedTodoId,\n  todos,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const selectedTodo = todos.find(todo => todo.id === selectedTodoId);\n\n  const handleClickClose = () => {\n    setIsLoaded(false);\n    setIsSelected(false);\n  };\n\n  useEffect(() => {\n    if (selectedTodo) {\n      getUser(selectedTodo.userId).then(uselUsers => setUser(uselUsers));\n    }\n  }, [selectedTodoId]);\n\n  return (\n    <>\n      {isSelected && (\n        <div className=\"modal is-active\" data-cy=\"modal\">\n          <div className=\"modal-background\" />\n\n          {!isLoaded ? (\n            <Loader />\n          ) : (\n            <div className=\"modal-card\">\n              <header className=\"modal-card-head\">\n                <div\n                  className=\"modal-card-title has-text-weight-medium\"\n                  data-cy=\"modal-header\"\n                >\n                  {`Todo #${selectedTodo?.id}`}\n                </div>\n                {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n                <button\n                  type=\"button\"\n                  className=\"delete\"\n                  data-cy=\"modal-close\"\n                  onClick={handleClickClose}\n                />\n              </header>\n\n              <div className=\"modal-card-body\">\n                <p className=\"block\" data-cy=\"modal-title\">\n                  {selectedTodo?.title}\n                </p>\n\n                <p className=\"block\" data-cy=\"modal-user\">\n                  {selectedTodo?.completed\n                    ? <strong className=\"has-text-success\">Done</strong>\n                    : <strong className=\"has-text-danger\">Planned</strong>}\n\n                  {' by '}\n\n                  <a href={`mailto:${user?.email}`}>\n                    {user?.name}\n                  </a>\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n","// /* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isSelected, setIsSelected] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [selectedTodoId, setSelectedTodoId] = useState<number | null>(null);\n  const [complitedSelect, setComplitedSelect] = useState('all');\n  const [inputValue, setInputValue] = useState('');\n\n  useEffect(() => {\n    (getTodos()\n      .then(setTodos))\n      .finally(() => setIsLoaded(false));\n  }, []);\n\n  const filteredTodos = useMemo(() => todos.filter(todo => {\n    let result: boolean;\n\n    if (complitedSelect === 'active') {\n      result = todo.completed === false;\n    } else if (complitedSelect === 'completed') {\n      result = todo.completed === true;\n    } else {\n      return todo;\n    }\n\n    return result;\n  })\n    .filter(todo => {\n      if (inputValue === '') {\n        return todo;\n      }\n\n      return todo.title.startsWith(inputValue);\n    }), [todos, complitedSelect, inputValue]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                setComplitedSelect={setComplitedSelect}\n                complitedSelect={complitedSelect}\n                inputValue={inputValue}\n                setInputValue={setInputValue}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoaded\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={filteredTodos}\n                    setIsSelected={setIsSelected}\n                    setIsLoaded={setIsLoaded}\n                    setSelectedTodoId={setSelectedTodoId}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <TodoModal\n        isSelected={isSelected}\n        isLoaded={isLoaded}\n        setIsLoaded={setIsLoaded}\n        setIsSelected={setIsSelected}\n        selectedTodoId={selectedTodoId}\n        todos={todos}\n      />\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}